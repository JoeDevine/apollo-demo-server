schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.2", for: EXECUTION)
{
  query: Query
}

directive @join__field(graph: join__Graph!, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

type another
  @join__type(graph: SUBGRAPH_DEMO)
{
  stuff: String
}

scalar join__FieldSet

enum join__Graph {
  SUBGRAPH_DEMO @join__graph(name: "subgraph-demo", url: "http://localhost:4001/")
  SUBGRAPH_USER @join__graph(name: "subgraph-user", url: "http://localhost:4002/")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Query
  @join__type(graph: SUBGRAPH_DEMO)
  @join__type(graph: SUBGRAPH_USER)
{
  example: String @join__field(graph: SUBGRAPH_DEMO)
  userDetails: User @join__field(graph: SUBGRAPH_USER)
}

type thing
  @join__type(graph: SUBGRAPH_DEMO, key: "id")
{
  id: ID!
  name: String!
  description: String!
}

type User
  @join__type(graph: SUBGRAPH_USER, key: "id")
{
  id: ID!
  name: String!
  Surname: String!
}